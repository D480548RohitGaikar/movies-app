{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport movieData from \"./movies-filter-react.json\";\nexport function useMovies(query) {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  useEffect(() => {\n    const controller = new AbortController();\n    async function fetchMovies() {\n      try {\n        setIsLoading(true);\n        setError(\"\");\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        const filteredMovies = movieData.filter(movie => movie.movietitle.toLowerCase().includes(query.toLowerCase()));\n        setMovies(filteredMovies);\n        setError(\"\");\n      } catch (err) {\n        console.log(err);\n        setError(\"Failed to fetch movies\");\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    if (query.length >= 3) {\n      fetchMovies();\n    } else {\n      setMovies([]);\n      setError(\"\");\n    }\n    return () => {\n      controller.abort();\n    };\n  }, [query]);\n  return {\n    movies,\n    isLoading,\n    error\n  };\n}\n_s(useMovies, \"U+znDQTK7eje4cwlxt5gS2qHcHc=\");","map":{"version":3,"names":["useState","useEffect","movieData","useMovies","query","_s","movies","setMovies","isLoading","setIsLoading","error","setError","controller","AbortController","fetchMovies","Promise","resolve","setTimeout","filteredMovies","filter","movie","movietitle","toLowerCase","includes","err","console","log","length","abort"],"sources":["C:/Users/rohit/Desktop/movies-app/movies/src/useMovies.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport movieData from \"./movies-filter-react.json\";\n\nexport function useMovies(query) {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    async function fetchMovies() {\n      try {\n        setIsLoading(true);\n        setError(\"\");\n\n        await new Promise((resolve) => setTimeout(resolve, 1000));\n\n        const filteredMovies = movieData.filter((movie) =>\n          movie.movietitle.toLowerCase().includes(query.toLowerCase())\n        );\n\n        setMovies(filteredMovies);\n        setError(\"\");\n      } catch (err) {\n        console.log(err);\n        setError(\"Failed to fetch movies\");\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    if (query.length >= 3) {\n      fetchMovies();\n    } else {\n      setMovies([]);\n      setError(\"\");\n    }\n\n    return () => {\n      controller.abort();\n    };\n  }, [query]);\n\n  return { movies, isLoading, error };\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,SAAS,MAAM,4BAA4B;AAElD,OAAO,SAASC,SAASA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC/B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,MAAMW,UAAU,GAAG,IAAIC,eAAe,EAAE;IAExC,eAAeC,WAAWA,CAAA,EAAG;MAC3B,IAAI;QACFL,YAAY,CAAC,IAAI,CAAC;QAClBE,QAAQ,CAAC,EAAE,CAAC;QAEZ,MAAM,IAAII,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;QAEzD,MAAME,cAAc,GAAGhB,SAAS,CAACiB,MAAM,CAAEC,KAAK,IAC5CA,KAAK,CAACC,UAAU,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACnB,KAAK,CAACkB,WAAW,EAAE,CAAC,CAC7D;QAEDf,SAAS,CAACW,cAAc,CAAC;QACzBP,QAAQ,CAAC,EAAE,CAAC;MACd,CAAC,CAAC,OAAOa,GAAG,EAAE;QACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;QAChBb,QAAQ,CAAC,wBAAwB,CAAC;MACpC,CAAC,SAAS;QACRF,YAAY,CAAC,KAAK,CAAC;MACrB;IACF;IAEA,IAAIL,KAAK,CAACuB,MAAM,IAAI,CAAC,EAAE;MACrBb,WAAW,EAAE;IACf,CAAC,MAAM;MACLP,SAAS,CAAC,EAAE,CAAC;MACbI,QAAQ,CAAC,EAAE,CAAC;IACd;IAEA,OAAO,MAAM;MACXC,UAAU,CAACgB,KAAK,EAAE;IACpB,CAAC;EACH,CAAC,EAAE,CAACxB,KAAK,CAAC,CAAC;EAEX,OAAO;IAAEE,MAAM;IAAEE,SAAS;IAAEE;EAAM,CAAC;AACrC;AAACL,EAAA,CA1CeF,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}